#! /usr/bin/env python

# TO-DO:
#  [1] Make standalone tool
#      https://stackoverflow.com/questions/5458048/how-can-i-make-a-python-script-standalone-executable-to-run-without-any-dependen
#  [2] MongoLite
#      https://pypi.org/project/MongoLite/
#  [3] Change catalogue types to fits -- easier for bookkeeping.
#  [4] Include log files as part of default
#  [5] Consider getting PyBDSF/Aegean islands with dump
#  [6] Fix up ProFound Boundray extraction code -- almost there!
#  [7] Handle BANE beam inputs option -- added warning if BMAJ, BMIN, BPA missing
#  [8] Check if CRVAL3 (i.e., frequecny) exists, give warning is unkown CTYPE3, before
#      reverting to default (should fix cutout tool).
#  [9] Selavy taylor file extension problem.
# [10] Add reg module dependent color codes
# [11] Try the following PyBDSF docker container:
#          https://hub.docker.com/r/stimela/pybdsf
# [12] Checkout BPA 0 (i.e., int) in homados.py shallow error.
# [13] Typhon work on simulated file.
#           File "data/simulated/emu_simulated_04.shallow.fits", line 1
#         SyntaxError: Non-UTF-8 code starting with '\x8d' in file data/simulated/emu_simulated_04.shallow.fits on line 2, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details
# [14] Aegean: Investigate units for residual_mean and residual_std output catalogue columns.
# [15] ProFound: Note all units have been defined -- investigate.
# [16] VM Debug:
#         $ docker run --rm -t -v /home/ubuntu/emu_pipeline/data:/home/profound/data -v /home/ubuntu/emu_pipeline/.escritoire/data/typhon:/home/profound/results profound /home/profound/data /home/profound/processing /home/profound/results step_1_emu_pilot_mosaic.fits --skycut 2.888888888888889 --tolerance 2.886
#         >>> Processing SegID: 83 / 64111
#         >>> Processing SegID: 84 / 64111
#         >>> Fast method didn't work: Invoking external Python alphashape package.
#         >>> Processing SegID: 85 / 64111
#         >>> Processing SegID: 86 / 64111
#         >>> Processing SegID: 87 / 64111
#         >>> Processing SegID: 88 / 64111
#         >>> Processing SegID: 89 / 64111
#         >>> Processing SegID: 90 / 64111
#         >>> Processing SegID: 91 / 64111
#         >>> Processing SegID: 92 / 64111
#         >>> Fast method didn't work: Invoking external Python alphashape package.
#         >>> Processing SegID: 93 / 64111
#         >>> Processing SegID: 94 / 64111
#         Error in mtx[m, n] : subscript out of bounds
#         Calls: make_regions -> extract_segments -> extract_segment
#         Execution halted
#         $
#
# [17] Make Ceberus Multi-threaded
# [17] Make Typhon Multi-threaded
# [18] Make Hydra::Typhon(deep/shallow) calls Multi-threaded
# [19] On prototype finished: Updgrade Hydra to process multiple images and then multi-threaded.
# [20] Restore ProFound groupID
# [21] RE: aegean.py
#      The following define might be problematic when fits = False
#         cat_comp_file = re.sub("\.[Ff][Ii][Tt]([Ss]|)$",f".aegean_comp.{'fits' if fits else 'csv'}",fits_image_file)
#      that is 
#         if residual:
#             create_residual_image(fits_image_file,cat_comp_file,processing_dir,output_dir)
#      might bail, as it doesn't look like it handles .csv files.
#      => Fix, and investigate other containers.
#      NB: On second thought this looks OK, as I use Table.read()... will need to double-check work.
# [22] Extract polygons from Caesar ds9.reg file
# [23] Fix aegean a,b problem (i.e., should be defined as major not minor -- investigate)
#      ==> kludge in modules/config/config.ymal under TODO's...
# [24] Fix profound major/minor interpratation.
#      ==> kludge in modules/config/config.ymal under TODO's...


# imports
import re
import os
import sys

# make this script path indepented
def abspath(local_dir):
    def get_this_source_file_directory():
        def path(fullpath):
            return re.sub(r"(.*/).*$",r"\1",fullpath)
        return path(os.path.realpath(__file__))
    return os.path.abspath(f"{get_this_source_file_directory()}/{local_dir}")
sys.path.insert(0,abspath("modules")) # inject libs path

# ok, now we can load our libs
# so, let's import our autogenerated script
from libs import cerberus

if __name__ == "__main__":
    cerberus() # et, ce'st tu!
